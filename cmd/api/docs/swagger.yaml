definitions:
  domain.Category:
    properties:
      category:
        type: string
      id:
        type: integer
    type: object
  models.AddCart:
    properties:
      id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.AddressInfoResponse:
    properties:
      city:
        type: string
      house_name:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      pin:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - house_name
    - name
    - pin
    - state
    type: object
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    type: object
  models.CategorytOfferResp:
    properties:
      category_id:
        type: integer
      discount_percentage:
        type: integer
      offer_name:
        type: string
    required:
    - category_id
    - discount_percentage
    - offer_name
    type: object
  models.ChangePassword:
    properties:
      confirm_password:
        type: string
      current_password:
        type: string
      id:
        type: integer
      new_password:
        type: string
    type: object
  models.Coupon:
    properties:
      coupon_name:
        type: string
      expire_date:
        type: string
      offer_percentage:
        type: integer
    type: object
  models.CouponResp:
    properties:
      coupon_name:
        type: string
      expire_date:
        type: string
      id:
        type: integer
      offer_percentage:
        type: integer
    type: object
  models.NewPaymentMethod:
    properties:
      payment_name:
        type: string
    type: object
  models.OTPdata:
    properties:
      phone:
        type: string
    type: object
  models.OrderFromCart:
    properties:
      address_id:
        type: integer
      coupon_id:
        type: integer
      payment_id:
        type: integer
      use_wallet:
        type: boolean
    required:
    - address_id
    - payment_id
    type: object
  models.ProductEdit:
    properties:
      category_id:
        type: integer
      color:
        type: string
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      stock:
        type: integer
    type: object
  models.ProductOfferResp:
    properties:
      discount_percentage:
        type: integer
      offer_name:
        type: string
      product_id:
        type: integer
    required:
    - discount_percentage
    - offer_name
    - product_id
    type: object
  models.ProductUpdate:
    properties:
      product_id:
        type: integer
      stock:
        type: integer
    type: object
  models.RemoveFromCart:
    properties:
      id:
        type: integer
      product_id:
        type: integer
    type: object
  models.SetNewName:
    properties:
      current:
        type: string
      new:
        type: string
    type: object
  models.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      referral_code:
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UsersProfileDetails:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      referral_code:
        type: string
    type: object
  models.VerifyData:
    properties:
      code:
        type: string
      phone:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact:
    name: API Support
  description: Show Times is an E-commerce platform to purchase Watch
  title: Go + Gin E-Commerce API Show Times
  version: 1.0.0
paths:
  /admin/block:
    patch:
      consumes:
      - application/json
      description: Blocks a user based on the provided ID.
      parameters:
      - description: User ID to block
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User blocked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to block user
          schema:
            $ref: '#/definitions/response.Response'
      summary: Block a user
      tags:
      - User Management
  /admin/categories:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available categories.
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Retrieved categories successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Fields provided are in the wrong format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not retrieve categories'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get all categories
      tags:
      - Category Management
  /admin/category:
    post:
      consumes:
      - application/json
      description: Adds a new category based on the provided details.
      parameters:
      - description: Category details to add
        in: body
        name: AddCategory
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Category added successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Fields are provided in the wrong format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not add the category'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new category
      tags:
      - Category Management
  /admin/category/delete:
    delete:
      consumes:
      - application/json
      description: Deletes a category based on the provided category ID.
      parameters:
      - description: Category ID to delete
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Category deleted successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Fields are not provided in the correct format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not delete the category'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a category
      tags:
      - Category Management
  /admin/category/update:
    patch:
      consumes:
      - application/json
      description: Updates the name of an existing category based on the provided
        details.
      parameters:
      - description: Current and new category name
        in: body
        name: UpdateCategory
        required: true
        schema:
          $ref: '#/definitions/models.SetNewName'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Category updated successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Fields provided are in the wrong format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not update the category'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update category name
      tags:
      - Category Management
  /admin/coupon:
    get:
      consumes:
      - application/json
      description: Retrieves coupon information
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Retrieved coupons successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Error while retrieving coupons'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get coupons
      tags:
      - User Coupon Management
  /admin/coupon/:
    put:
      consumes:
      - application/json
      description: Edit an existing coupon
      parameters:
      - description: Coupon object to edit
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/models.CouponResp'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Edited coupon successfully'
          schema:
            $ref: '#/definitions/models.CouponResp'
        "400":
          description: 'Bad request: Error while editing coupon'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit a coupon
      tags:
      - Admin Coupon Management
  /admin/coupons:
    post:
      consumes:
      - application/json
      description: Allows an admin to add a new coupon by providing the necessary
        details.
      parameters:
      - description: Coupon details to add
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/models.Coupon'
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: Coupon added successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid request payload or missing fields'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication token'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not add the coupon'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new coupon
      tags:
      - Admin Coupon Management
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Retrieves dashboard information for admin.
      produces:
      - application/json
      responses:
        "200":
          description: Admin dashboard retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or unable to retrieve dashboard
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve admin dashboard information
      tags:
      - Admin Dashboard
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin and returns an access token.
      parameters:
      - description: Admin login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Admin login successful, returns access token
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid request or incorrect format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Incorrect credentials'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Login failed'
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - Admin Authentication
  /admin/offer/category-offer:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all active category-wide offers.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all category offers
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Unable to fetch category offers'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get All Category Offers
      tags:
      - Admin Offer Management
    post:
      consumes:
      - application/json
      description: Adds a new offer applicable to a specific category.
      parameters:
      - description: Category offer details in JSON format
        in: body
        name: categoryOffer
        required: true
        schema:
          $ref: '#/definitions/models.CategorytOfferResp'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully added the category offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to add the category offer
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Category Offer
      tags:
      - Admin Offer Management
  /admin/offer/category-offer/expire:
    patch:
      consumes:
      - application/json
      description: Marks a category-wide offer as expired based on its ID.
      parameters:
      - description: Category offer ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully expired the category offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Unable to expire the category offer'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Expire Category Offer
      tags:
      - Admin Offer Management
  /admin/offer/product-offer:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all active product offers.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all product offers
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Unable to fetch product offers'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get All Product Offers
      tags:
      - Admin Offer Management
    post:
      consumes:
      - application/json
      description: Adds a new offer for a specific product.
      parameters:
      - description: Product offer details in JSON format
        in: body
        name: productOffer
        required: true
        schema:
          $ref: '#/definitions/models.ProductOfferResp'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully added the product offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to add the product offer
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Product Offer
      tags:
      - Admin Offer Management
  /admin/offer/product-offer/expire:
    patch:
      consumes:
      - application/json
      description: Marks a product offer as expired based on its ID.
      parameters:
      - description: Product offer ID to be expired
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully expired the product offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Unable to expire the product offer'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Expire Product Offer
      tags:
      - Admin Offer Management
  /admin/orders:
    delete:
      consumes:
      - application/json
      description: Cancels an order based on the provided order ID from an admin perspective.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID to cancel
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Order canceled successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid order ID'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not cancel the order'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Cancel an order as an admin
      tags:
      - Admin Order Management
    get:
      consumes:
      - application/json
      description: Retrieves all order details for admin with pagination based on
        the provided parameters.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Retrieved all order details for admin successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Page number or count not in correct format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not retrieve order details for
            admin'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve all order details for admin
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Approves an order based on the provided order ID.
      parameters:
      - description: Order ID to approve
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Order approved successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Error from orderID or couldn''t approve the order'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Failed to approve the order'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Approve order
      tags:
      - Order
  /admin/orders/{order_id}:
    delete:
      consumes:
      - application/json
      description: Cancels an order based on the provided order ID from an admin perspective.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID to cancel
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Order canceled successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid order ID'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not cancel the order'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Cancel an order as admin
      tags:
      - Admin Order Management
  /admin/payment:
    post:
      consumes:
      - application/json
      description: Adds a new payment method using the provided details.
      parameters:
      - description: Details of the new payment method
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.NewPaymentMethod'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Payment method added successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input or payment method could not be
            added'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Payment Method
      tags:
      - Admin Payment Methods
  /admin/printsales:
    get:
      consumes:
      - application/json
      description: Generates and downloads a sales report in either PDF or Excel format
        for a given day, month, and year. If no format is specified, the report is
        downloaded as an Excel file by default.
      parameters:
      - description: Year of the sales report (e.g., 2025)
        in: query
        name: year
        required: true
        type: integer
      - description: Month of the sales report (1-12)
        in: query
        name: month
        required: true
        type: integer
      - description: Day of the sales report (1-31)
        in: query
        name: day
        required: true
        type: integer
      - description: 'Download format: ''pdf'' or ''excel'' (defaults to ''excel'')'
        in: query
        name: download
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report downloaded successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid date format or unable to generate the
            report'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Unable to generate the sales report'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Generate and download sales report by date
      tags:
      - Admin Sales Reports
  /admin/product:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product using its ID.
      parameters:
      - description: ID of the product to be deleted
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid product ID or deletion error'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Fetches a paginated list of products.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of products per page (default: 5)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product list retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Error displaying products'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: List products
      tags:
      - Product
    patch:
      consumes:
      - application/json
      description: Updates an existing product using the provided details.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Inventory ID of the product to update
        in: query
        name: inventory_id
        required: true
        type: integer
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductEdit'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Product updated successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input or product update error'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Unable to update product'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit product
      tags:
      - Product Management
    post:
      consumes:
      - multipart/form-data
      description: Adds a new product using the provided details and image.
      parameters:
      - description: Category ID of the product
        in: formData
        name: category_id
        required: true
        type: integer
      - description: Name of the product
        in: formData
        name: product_name
        required: true
        type: string
      - description: Color of the product
        in: formData
        name: color
        required: true
        type: string
      - description: Stock quantity of the product
        in: formData
        name: stock
        required: true
        type: integer
      - description: Price of the product
        in: formData
        name: price
        required: true
        type: number
      - description: Image file of the product
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Product added successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input or image upload error'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new product
      tags:
      - Product
  /admin/salesreport:
    get:
      consumes:
      - application/json
      description: Retrieves sales report for the specified time period.
      parameters:
      - description: Time period for sales report (e.g., weekly, monthly)
        in: query
        name: period
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Unable to retrieve sales report
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve sales report for a current time period
      tags:
      - Sales Reports
  /admin/salesreport/daterange:
    get:
      consumes:
      - application/json
      description: Retrieves sales report based on the provided start and end dates.
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Unable to retrieve sales report
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve sales report by date range
      tags:
      - Sales Reports
  /admin/unblock:
    patch:
      consumes:
      - application/json
      description: Unblocks a user based on the provided ID.
      parameters:
      - description: User ID to unblock
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User unblocked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or unable to unblock user
          schema:
            $ref: '#/definitions/response.Response'
      summary: Unblock a user
      tags:
      - User Management
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves users based on the provided page number.
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or unable to retrieve users
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve users with pagination
      tags:
      - User Management
  /orders/invoice:
    get:
      consumes:
      - application/json
      description: Generates and returns a PDF invoice for the specified order ID.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: 'Bad request: Invalid order ID or missing parameter'
          schema:
            $ref: '#/definitions/response.Response'
        "502":
          description: 'Bad gateway: Error generating or processing the invoice'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Generate Invoice PDF
      tags:
      - Orders
  /payment/razorpay:
    get:
      consumes:
      - application/json
      description: Initiates a payment process using Razorpay for the specified user
        and order.
      parameters:
      - description: User ID of the payer
        in: query
        name: user_id
        required: true
        type: integer
      - description: Order ID associated with the payment
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - text/html
      responses:
        "200":
          description: Payment initiated successfully
          schema:
            type: string
        "400":
          description: 'Bad request: Invalid user ID or order ID'
          schema:
            $ref: '#/definitions/response.Response'
      summary: Make Payment using Razorpay
      tags:
      - Payments
  /payment/verify:
    get:
      consumes:
      - application/json
      description: Verifies the payment details after a successful transaction and
        updates the database.
      parameters:
      - description: Order ID associated with the payment
        in: query
        name: order_id
        required: true
        type: string
      - description: Payment ID received from the payment gateway
        in: query
        name: payment_id
        required: true
        type: string
      - description: Razorpay payment identifier
        in: query
        name: razor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated payment details
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not update payment details'
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify Payment
      tags:
      - Payments
  /product/stock:
    patch:
      consumes:
      - application/json
      description: Updates the stock quantity of an existing product.
      parameters:
      - description: Updated stock details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Product stock updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input or update error'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update product stock
      tags:
      - Product
  /user/cart:
    patch:
      consumes:
      - application/json
      description: Updates the quantity of a product in the user's cart based on the
        provided details.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product details to update quantity
        in: body
        name: UpdateCart
        required: true
        schema:
          $ref: '#/definitions/models.AddCart'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Quantity updated successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Cannot update quantity or fields are in the wrong
            format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Update failed'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update product quantity in cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Adds an item to the user's cart based on the provided details.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Item details to add to the cart
        in: body
        name: AddCart
        required: true
        schema:
          $ref: '#/definitions/models.AddCart'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Item added to cart successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Fields provided in the wrong format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Cannot add item to cart'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add an item to the cart
      tags:
      - Cart
  /user/cart/list:
    get:
      consumes:
      - application/json
      description: Retrieves the list of items in the user's cart based on the user
        ID.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Retrieved cart items successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Cannot list products'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not retrieve the cart list'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve cart items
      tags:
      - Cart
  /user/cart/remove:
    delete:
      consumes:
      - application/json
      description: Removes a product from the user's cart based on the provided details.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product details to remove from cart
        in: body
        name: RemoveFromCart
        required: true
        schema:
          $ref: '#/definitions/models.RemoveFromCart'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Product removed from cart successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Cannot remove product or fields are in the wrong
            format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Removing from cart failed'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Remove product from cart
      tags:
      - Cart
  /user/details:
    get:
      consumes:
      - application/json
      description: Retrieves the details of the authenticated user.
      parameters:
      - description: User ID of the authenticated user
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid user ID format or unable to retrieve
            details'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get user details
      tags:
      - Users
  /user/google_login:
    get:
      description: Redirects the user to Google login page.
      responses:
        "302":
          description: Redirects to Google login page
      summary: Google login
      tags:
      - Users
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using provided credentials.
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid credentials or unable to log in'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: User login
      tags:
      - Users
  /user/orders:
    get:
      consumes:
      - application/json
      description: Retrieves order details for a user based on the provided pagination
        parameters.
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Retrieved order details successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Page number or count not in correct format'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not retrieve order details'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve order details
      tags:
      - Order
    patch:
      consumes:
      - application/json
      description: Initiates the return process for an order based on the provided
        order ID and user ID.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID to initiate return
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Order returned successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid order ID'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Couldn''t process the order return'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Initiate order return
      tags:
      - Order Management
    post:
      consumes:
      - application/json
      description: Places an order with items from the user's cart.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order details from cart
        in: body
        name: OrderFromCart
        required: true
        schema:
          $ref: '#/definitions/models.OrderFromCart'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Order placed successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Error in getting user ID or invalid request'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not place the order'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Place order from cart
      tags:
      - Order Management
  /user/orders/checkout:
    post:
      consumes:
      - application/json
      description: Processes the checkout for the user's order.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Checkout completed successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Getting user ID failed'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid or missing authentication'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Checkout failed'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Process checkout
      tags:
      - Order Management
  /user/otplogin:
    post:
      consumes:
      - application/json
      description: Sends a One-Time Password (OTP) to the provided phone number for
        user authentication.
      parameters:
      - description: Request payload containing the phone number to send OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OTPdata'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input format or OTP sending failed'
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - OTP
  /user/password:
    patch:
      consumes:
      - application/json
      description: Allows the authenticated user to change their password.
      parameters:
      - description: Authenticated User ID
        in: header
        name: id
        required: true
        type: integer
      - description: New password details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input format or unable to change password'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Change user password
      tags:
      - Users
  /user/products:
    get:
      consumes:
      - application/json
      description: Fetches a paginated list of products available to users.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of products per page (default: 5)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the product list
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid pagination parameters or unable to fetch
            products'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Could not retrieve products'
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get paginated list of products
      tags:
      - Products
  /user/profile:
    patch:
      consumes:
      - application/json
      description: Updates the profile information of the authenticated user.
      parameters:
      - description: Authenticated User ID
        in: header
        name: id
        required: true
        type: integer
      - description: Updated user profile details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UsersProfileDetails'
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input format or unable to update profile'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update user profile
      tags:
      - Users
  /user/profile/address:
    post:
      consumes:
      - application/json
      description: Adds an address for the authenticated user.
      parameters:
      - description: User address details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddressInfoResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Address added successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input or unable to add address'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add user address
      tags:
      - Users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided details.
      parameters:
      - description: User details for sign-up
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserDetails'
      produces:
      - application/json
      responses:
        "201":
          description: User signed up successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid input format or constraints not satisfied'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Register a new user
      tags:
      - Users
  /user/verifyotp:
    post:
      consumes:
      - application/json
      description: Verifies the provided One-Time Password (OTP) to authenticate the
        user.
      parameters:
      - description: Request payload containing the OTP for verification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyData'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Invalid OTP format or verification failed'
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - OTP
  /user/wallet/history:
    get:
      consumes:
      - application/json
      description: Fetches the wallet transaction history for the authenticated user.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Retrieved wallet history successfully'
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: Error while retrieving wallet history'
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Missing or invalid authentication'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get wallet transaction history
      tags:
      - User Wallet Management
  /wallet:
    get:
      consumes:
      - application/json
      description: Retrieves the wallet details of the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Wallet details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: User ID not found or invalid format'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: Failed to retrieve wallet details'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get wallet details
      tags:
      - Wallet
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
