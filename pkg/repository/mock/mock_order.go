// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/order.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "ShowTimes/pkg/domain"
	models "ShowTimes/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrderProducts mocks base method.
func (m *MockOrderRepository) AddOrderProducts(order_id int, cart []models.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderProducts", order_id, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderProducts indicates an expected call of AddOrderProducts.
func (mr *MockOrderRepositoryMockRecorder) AddOrderProducts(order_id, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderProducts", reflect.TypeOf((*MockOrderRepository)(nil).AddOrderProducts), order_id, cart)
}

// AddTotalToOrder mocks base method.
func (m *MockOrderRepository) AddTotalToOrder(orderId int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTotalToOrder", orderId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTotalToOrder indicates an expected call of AddTotalToOrder.
func (mr *MockOrderRepositoryMockRecorder) AddTotalToOrder(orderId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTotalToOrder", reflect.TypeOf((*MockOrderRepository)(nil).AddTotalToOrder), orderId, amount)
}

// ApproveCodPaid mocks base method.
func (m *MockOrderRepository) ApproveCodPaid(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveCodPaid", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveCodPaid indicates an expected call of ApproveCodPaid.
func (mr *MockOrderRepositoryMockRecorder) ApproveCodPaid(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveCodPaid", reflect.TypeOf((*MockOrderRepository)(nil).ApproveCodPaid), orderID)
}

// ApproveCodReturn mocks base method.
func (m *MockOrderRepository) ApproveCodReturn(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveCodReturn", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveCodReturn indicates an expected call of ApproveCodReturn.
func (mr *MockOrderRepositoryMockRecorder) ApproveCodReturn(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveCodReturn", reflect.TypeOf((*MockOrderRepository)(nil).ApproveCodReturn), orderID)
}

// ApproveOrder mocks base method.
func (m *MockOrderRepository) ApproveOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveOrder indicates an expected call of ApproveOrder.
func (mr *MockOrderRepositoryMockRecorder) ApproveOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveOrder", reflect.TypeOf((*MockOrderRepository)(nil).ApproveOrder), orderID)
}

// ApproveRazorDelivered mocks base method.
func (m *MockOrderRepository) ApproveRazorDelivered(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveRazorDelivered", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveRazorDelivered indicates an expected call of ApproveRazorDelivered.
func (mr *MockOrderRepositoryMockRecorder) ApproveRazorDelivered(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveRazorDelivered", reflect.TypeOf((*MockOrderRepository)(nil).ApproveRazorDelivered), orderID)
}

// ApproveRazorPaid mocks base method.
func (m *MockOrderRepository) ApproveRazorPaid(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveRazorPaid", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveRazorPaid indicates an expected call of ApproveRazorPaid.
func (mr *MockOrderRepositoryMockRecorder) ApproveRazorPaid(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveRazorPaid", reflect.TypeOf((*MockOrderRepository)(nil).ApproveRazorPaid), orderID)
}

// CancelOrders mocks base method.
func (m *MockOrderRepository) CancelOrders(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrders", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockOrderRepositoryMockRecorder) CancelOrders(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrders), orderID)
}

// CheckOrderID mocks base method.
func (m *MockOrderRepository) CheckOrderID(orderId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderID", orderId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrderID indicates an expected call of CheckOrderID.
func (mr *MockOrderRepositoryMockRecorder) CheckOrderID(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderID", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrderID), orderId)
}

// FindCartQuantity mocks base method.
func (m *MockOrderRepository) FindCartQuantity(cart_id, product_id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartQuantity", cart_id, product_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartQuantity indicates an expected call of FindCartQuantity.
func (mr *MockOrderRepositoryMockRecorder) FindCartQuantity(cart_id, product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartQuantity", reflect.TypeOf((*MockOrderRepository)(nil).FindCartQuantity), cart_id, product_id)
}

// FindPrice mocks base method.
func (m *MockOrderRepository) FindPrice(product_id int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrice", product_id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrice indicates an expected call of FindPrice.
func (mr *MockOrderRepositoryMockRecorder) FindPrice(product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrice", reflect.TypeOf((*MockOrderRepository)(nil).FindPrice), product_id)
}

// FindProductNames mocks base method.
func (m *MockOrderRepository) FindProductNames(product_id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductNames", product_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductNames indicates an expected call of FindProductNames.
func (mr *MockOrderRepositoryMockRecorder) FindProductNames(product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductNames", reflect.TypeOf((*MockOrderRepository)(nil).FindProductNames), product_id)
}

// FindStock mocks base method.
func (m *MockOrderRepository) FindStock(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStock", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStock indicates an expected call of FindStock.
func (mr *MockOrderRepositoryMockRecorder) FindStock(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStock", reflect.TypeOf((*MockOrderRepository)(nil).FindStock), id)
}

// GetAddressFromOrderId mocks base method.
func (m *MockOrderRepository) GetAddressFromOrderId(orderID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressFromOrderId", orderID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressFromOrderId indicates an expected call of GetAddressFromOrderId.
func (mr *MockOrderRepositoryMockRecorder) GetAddressFromOrderId(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressFromOrderId", reflect.TypeOf((*MockOrderRepository)(nil).GetAddressFromOrderId), orderID)
}

// GetAllOrdersAdmin mocks base method.
func (m *MockOrderRepository) GetAllOrdersAdmin(offset, count int) ([]models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersAdmin", offset, count)
	ret0, _ := ret[0].([]models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersAdmin indicates an expected call of GetAllOrdersAdmin.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrdersAdmin(offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersAdmin", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrdersAdmin), offset, count)
}

// GetAllPaymentOption mocks base method.
func (m *MockOrderRepository) GetAllPaymentOption() ([]models.PaymentDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaymentOption")
	ret0, _ := ret[0].([]models.PaymentDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentOption indicates an expected call of GetAllPaymentOption.
func (mr *MockOrderRepositoryMockRecorder) GetAllPaymentOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentOption", reflect.TypeOf((*MockOrderRepository)(nil).GetAllPaymentOption))
}

// GetBriefOrderDetails mocks base method.
func (m *MockOrderRepository) GetBriefOrderDetails(orderID int) (models.OrderSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBriefOrderDetails", orderID)
	ret0, _ := ret[0].(models.OrderSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBriefOrderDetails indicates an expected call of GetBriefOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetBriefOrderDetails(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBriefOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetBriefOrderDetails), orderID)
}

// GetDetailedOrderThroughId mocks base method.
func (m *MockOrderRepository) GetDetailedOrderThroughId(orderId int) (models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedOrderThroughId", orderId)
	ret0, _ := ret[0].(models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailedOrderThroughId indicates an expected call of GetDetailedOrderThroughId.
func (mr *MockOrderRepositoryMockRecorder) GetDetailedOrderThroughId(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedOrderThroughId", reflect.TypeOf((*MockOrderRepository)(nil).GetDetailedOrderThroughId), orderId)
}

// GetFinalPrice mocks base method.
func (m *MockOrderRepository) GetFinalPrice(orderId int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalPrice", orderId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalPrice indicates an expected call of GetFinalPrice.
func (mr *MockOrderRepositoryMockRecorder) GetFinalPrice(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalPrice", reflect.TypeOf((*MockOrderRepository)(nil).GetFinalPrice), orderId)
}

// GetFinalPriceOrder mocks base method.
func (m *MockOrderRepository) GetFinalPriceOrder(orderID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalPriceOrder", orderID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalPriceOrder indicates an expected call of GetFinalPriceOrder.
func (mr *MockOrderRepositoryMockRecorder) GetFinalPriceOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalPriceOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetFinalPriceOrder), orderID)
}

// GetItemsByOrderId mocks base method.
func (m *MockOrderRepository) GetItemsByOrderId(orderId int) ([]models.ItemDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByOrderId", orderId)
	ret0, _ := ret[0].([]models.ItemDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByOrderId indicates an expected call of GetItemsByOrderId.
func (mr *MockOrderRepositoryMockRecorder) GetItemsByOrderId(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByOrderId", reflect.TypeOf((*MockOrderRepository)(nil).GetItemsByOrderId), orderId)
}

// GetOrder mocks base method.
func (m *MockOrderRepository) GetOrder(orderId int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderId)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositoryMockRecorder) GetOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), orderId)
}

// GetOrderDetailOfAproduct mocks base method.
func (m *MockOrderRepository) GetOrderDetailOfAproduct(orderID int) (models.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailOfAproduct", orderID)
	ret0, _ := ret[0].(models.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetailOfAproduct indicates an expected call of GetOrderDetailOfAproduct.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetailOfAproduct(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailOfAproduct", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetailOfAproduct), orderID)
}

// GetOrderDetails mocks base method.
func (m *MockOrderRepository) GetOrderDetails(userId, page, count int) ([]models.FullOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetails", userId, page, count)
	ret0, _ := ret[0].([]models.FullOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetails indicates an expected call of GetOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetails(userId, page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetails), userId, page, count)
}

// GetPaymentStatus mocks base method.
func (m *MockOrderRepository) GetPaymentStatus(orderID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatus", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatus indicates an expected call of GetPaymentStatus.
func (mr *MockOrderRepositoryMockRecorder) GetPaymentStatus(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetPaymentStatus), orderID)
}

// GetPaymentType mocks base method.
func (m *MockOrderRepository) GetPaymentType(orderID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentType", orderID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentType indicates an expected call of GetPaymentType.
func (mr *MockOrderRepositoryMockRecorder) GetPaymentType(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentType", reflect.TypeOf((*MockOrderRepository)(nil).GetPaymentType), orderID)
}

// GetProductDetailsFromOrders mocks base method.
func (m *MockOrderRepository) GetProductDetailsFromOrders(orderID int) ([]models.OrderProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetailsFromOrders", orderID)
	ret0, _ := ret[0].([]models.OrderProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetailsFromOrders indicates an expected call of GetProductDetailsFromOrders.
func (mr *MockOrderRepositoryMockRecorder) GetProductDetailsFromOrders(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetailsFromOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetProductDetailsFromOrders), orderID)
}

// GetProductsInCart mocks base method.
func (m *MockOrderRepository) GetProductsInCart(cart_id int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsInCart", cart_id)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsInCart indicates an expected call of GetProductsInCart.
func (mr *MockOrderRepositoryMockRecorder) GetProductsInCart(cart_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsInCart", reflect.TypeOf((*MockOrderRepository)(nil).GetProductsInCart), cart_id)
}

// GetShipmentStatus mocks base method.
func (m *MockOrderRepository) GetShipmentStatus(orderID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShipmentStatus", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipmentStatus indicates an expected call of GetShipmentStatus.
func (mr *MockOrderRepositoryMockRecorder) GetShipmentStatus(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipmentStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetShipmentStatus), orderID)
}

// GetTotalPrice mocks base method.
func (m *MockOrderRepository) GetTotalPrice(orderId int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPrice", orderId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPrice indicates an expected call of GetTotalPrice.
func (mr *MockOrderRepositoryMockRecorder) GetTotalPrice(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPrice", reflect.TypeOf((*MockOrderRepository)(nil).GetTotalPrice), orderId)
}

// OrderExist mocks base method.
func (m *MockOrderRepository) OrderExist(orderID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderExist", orderID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderExist indicates an expected call of OrderExist.
func (mr *MockOrderRepositoryMockRecorder) OrderExist(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderExist", reflect.TypeOf((*MockOrderRepository)(nil).OrderExist), orderID)
}

// OrderItems mocks base method.
func (m *MockOrderRepository) OrderItems(ob models.OrderIncoming, finalPrice, totalPrice float64, isWallet bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderItems", ob, finalPrice, totalPrice, isWallet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderItems indicates an expected call of OrderItems.
func (mr *MockOrderRepositoryMockRecorder) OrderItems(ob, finalPrice, totalPrice, isWallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderItems", reflect.TypeOf((*MockOrderRepository)(nil).OrderItems), ob, finalPrice, totalPrice, isWallet)
}

// PayRazorZero mocks base method.
func (m *MockOrderRepository) PayRazorZero(orderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayRazorZero", orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayRazorZero indicates an expected call of PayRazorZero.
func (mr *MockOrderRepositoryMockRecorder) PayRazorZero(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayRazorZero", reflect.TypeOf((*MockOrderRepository)(nil).PayRazorZero), orderId)
}

// ReturnOrderCod mocks base method.
func (m *MockOrderRepository) ReturnOrderCod(orderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrderCod", orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrderCod indicates an expected call of ReturnOrderCod.
func (mr *MockOrderRepositoryMockRecorder) ReturnOrderCod(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrderCod", reflect.TypeOf((*MockOrderRepository)(nil).ReturnOrderCod), orderId)
}

// ReturnOrderRazorPay mocks base method.
func (m *MockOrderRepository) ReturnOrderRazorPay(order int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrderRazorPay", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrderRazorPay indicates an expected call of ReturnOrderRazorPay.
func (mr *MockOrderRepositoryMockRecorder) ReturnOrderRazorPay(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrderRazorPay", reflect.TypeOf((*MockOrderRepository)(nil).ReturnOrderRazorPay), order)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), orderID)
}

// UpdateQuantityOfProduct mocks base method.
func (m *MockOrderRepository) UpdateQuantityOfProduct(orderProducts []models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityOfProduct", orderProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityOfProduct indicates an expected call of UpdateQuantityOfProduct.
func (mr *MockOrderRepositoryMockRecorder) UpdateQuantityOfProduct(orderProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityOfProduct", reflect.TypeOf((*MockOrderRepository)(nil).UpdateQuantityOfProduct), orderProducts)
}

// UpdateStockOfProduct mocks base method.
func (m *MockOrderRepository) UpdateStockOfProduct(orderProducts []models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStockOfProduct", orderProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStockOfProduct indicates an expected call of UpdateStockOfProduct.
func (mr *MockOrderRepositoryMockRecorder) UpdateStockOfProduct(orderProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStockOfProduct", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStockOfProduct), orderProducts)
}

// UserOrderRelationship mocks base method.
func (m *MockOrderRepository) UserOrderRelationship(orderID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderRelationship", orderID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrderRelationship indicates an expected call of UserOrderRelationship.
func (mr *MockOrderRepositoryMockRecorder) UserOrderRelationship(orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderRelationship", reflect.TypeOf((*MockOrderRepository)(nil).UserOrderRelationship), orderID, userID)
}
